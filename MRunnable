m_pIOSNotifyThread->looper().postRunnable(MRunnableTask(this, &NMIOSNotifyProcessThread::doHandleMessage, temp));


MRunnableThread->looper().postRunnable(MRunnableTask(this, &NMIOSNotifyProcessThread::doHandleMessage, temp));

MRunnableThread:
inherit with NCThreadUnix
NCThreadUnix use linux pthread API

MRunnableLooper has a member MRunnableQueue


m_pIOSNotifyThread->looper().postRunnable(MTask(object, method, MMakeTuple(a)));

==>NCThreadUnix,MRunnableLooper,postRunnable(MTask(object, method, MMakeTuple(a)));
==>NCThreadUnix,MRunnableQueue,enqueueAtTail(MTask(object, method, MMakeTuple(a)));


m_pIOSNotifyThread->looper().enqueueAtTail(MRunnable *);
m_pIOSNotifyThread->looper().MRunnable<vector>.push_back(MRunnable *);
m_pIOSNotifyThread->MRunnableLooper().MRunnable<vector>.push_back(MRunnable *);
MThread->MRunnableLooper.MRunnable<vector>.push_back(MRunnable *);



